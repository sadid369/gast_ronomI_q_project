<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>CFBundleDevelopmentRegion</key>
	<string>$(DEVELOPMENT_LANGUAGE)</string>
	<key>CFBundleDisplayName</key>
	<string>Groc Shopy</string>
	<key>CFBundleExecutable</key>
	<string>$(EXECUTABLE_NAME)</string>
	<key>CFBundleIdentifier</key>
	<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundleName</key>
	<string>groc_shopy</string>
	<key>CFBundlePackageType</key>
	<string>APPL</string>
	<key>CFBundleShortVersionString</key>
	<string>$(FLUTTER_BUILD_NAME)</string>
	<key>CFBundleSignature</key>
	<string>????</string>
	<key>CFBundleVersion</key>
	<string>$(FLUTTER_BUILD_NUMBER)</string>
	<key>LSRequiresIPhoneOS</key>
	<true/>
	<key>UILaunchStoryboardName</key>
	<string>LaunchScreen</string>
	<key>UIMainStoryboardFile</key>
	<string>Main</string>
	<key>UISupportedInterfaceOrientations</key>
	<key>NSPhotoLibraryUsageDescription</key>
<string>We need access to your photo library to select images for your profile.</string>

<key>NSCameraUsageDescription</key>
<string>We need access to your camera to allow taking photos or videos.</string>

<key>NSMicrophoneUsageDescription</key>
<string>We need access to the microphone to record audio in videos.</string>
	<array>
		<string>UIInterfaceOrientationPortrait</string>
		<string>UIInterfaceOrientationLandscapeLeft</string>
		<string>UIInterfaceOrientationLandscapeRight</string>
	</array>
	<key>UISupportedInterfaceOrientations~ipad</key>
	<array>
		<string>UIInterfaceOrientationPortrait</string>
		<string>UIInterfaceOrientationPortraitUpsideDown</string>
		<string>UIInterfaceOrientationLandscapeLeft</string>
		<string>UIInterfaceOrientationLandscapeRight</string>
	</array>
	<key>CADisableMinimumFrameDurationOnPhone</key>
	<true/>
	<key>UIApplicationSupportsIndirectInputEvents</key>
	<true/>
	
</dict>
</plist>




///////////////// ********* ////////





import 'package:auto_size_text/auto_size_text.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:gap/gap.dart';
import 'package:go_router/go_router.dart';
import 'package:get/get.dart';
import 'package:groc_shopy/core/routes/route_path.dart';
import 'package:groc_shopy/helper/extension/base_extension.dart';
import 'package:groc_shopy/utils/app_colors/app_colors.dart';
import 'package:groc_shopy/utils/static_strings/static_strings.dart';
import 'package:groc_shopy/utils/text_style/text_style.dart';
import '../../../core/custom_assets/assets.gen.dart';
import '../../../global/language/controller/language_controller.dart';
import '../../widgets/purchase_card/purchase_card.dart';
import '../../widgets/purchase_history_item/purchase_history_item.dart';
import '../../widgets/subscription_plans/subscription_plans.dart';
import '../../widgets/subscription_modal/subscription_modal.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({Key? key}) : super(key: key);

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  final LanguageController _languageController = Get.find();

  @override
  void initState() {
    super.initState();
    _showSubscriptionModal();
  }

  void _showSubscriptionModal() {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      showDialog(
        context: context,
        barrierDismissible: false,
        builder: (context) => const SubscriptionModal(),
      );
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFFF9F3E8),
      body: SafeArea(
        child: Padding(
          padding: EdgeInsets.symmetric(horizontal: 16.w, vertical: 16.h),
          child: SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                _buildHeader(),
                Gap(24.h),
                _buildMonthlyReportCard(),
                Gap(24.h),
                _buildMonthlyGrocerySpendingSection(),
                Gap(8.h),
                _buildExpensesCards(),
                Gap(24.h),
                _buildRecentPurchasesSection(),
                Gap(24.h),
                _buildPurchaseHistorySection(),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildHeader() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Row(
          children: [
            CircleAvatar(
              radius: 30.r,
              backgroundImage: const NetworkImage(
                  'https://randomuser.me/api/portraits/men/32.jpg'),
            ),
            Gap(12.w),
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              spacing: 8.w,
              children: [
                Text(
                  'Alex Thomson',
                  style: AppStyle.kohSantepheap16w700C3F3F3F,
                ),
                Text(
                  AppStrings.yourGroceryExpensesAtAGlance.tr,
                  style: AppStyle.roboto12w400C80000000,
                ),
              ],
            ),
          ],
        ),
        _buildActionButtons(),
      ],
    );
  }

  Widget _buildActionButtons() {
    return Row(
      children: [
        _buildIconButton(Assets.icons.shop.path),
        Gap(6.w),
        GestureDetector(
          onTap: _showLanguageMenu,
          child: _buildIconButton(Assets.icons.language.path),
        ),
      ],
    );
  }

  Widget _buildIconButton(String iconPath) {
    return Container(
      height: 24.h,
      width: 24.w,
      decoration: BoxDecoration(
        color: const Color(0xFFD9D9D9),
        borderRadius: BorderRadius.circular(8.r),
      ),
      child: Image.asset(
        iconPath,
        height: 24.h,
        width: 24.w,
      ),
    );
  }

  Future<void> _showLanguageMenu() async {
    final RenderBox overlay =
        Overlay.of(context).context.findRenderObject() as RenderBox;

    final selected = await showMenu<String>(
      context: context,
      position: RelativeRect.fromRect(
        Rect.fromPoints(
          Offset(overlay.size.width - 56.w, 80.h),
          Offset(overlay.size.width - 16.w, 120.h),
        ),
        Offset.zero & overlay.size,
      ),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(16.r),
      ),
      items: [
        const PopupMenuItem(
          value: 'en',
          child: Text('English'),
        ),
        const PopupMenuItem(
          value: 'de',
          child: Text('German'),
        ),
      ],
    );

    if (selected != null) {
      _languageController
          .changeLanguage(selected == 'en' ? "English" : "German");
    }
  }

  Widget _buildMonthlyReportCard() {
    return InkWell(
      onTap: () => context.push(RoutePath.report.addBasePath),
      child: Container(
        padding: EdgeInsets.symmetric(vertical: 14.h, horizontal: 16.w),
        decoration: BoxDecoration(
          color: const Color(0xFFF0F0F0),
          borderRadius: BorderRadius.circular(8.r),
          boxShadow: const [
            BoxShadow(
              color: Color(0x40FFD673),
              offset: Offset(0, 2),
              blurRadius: 2,
              spreadRadius: 0,
            ),
          ],
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  '25 April, 2025',
                  style: AppStyle.roboto12w400C5A5A5A,
                ),
                Gap(8.h),
                Text(
                  AppStrings.monthlyReport.tr,
                  style: AppStyle.roboto16w400C000000,
                ),
              ],
            ),
            CircleAvatar(
              radius: 25.r,
              backgroundColor: const Color(0xFF0000000).withOpacity(0.05),
              child: Image.asset(
                Assets.icons.graph.path,
                height: 48.h,
                width: 48.w,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildMonthlyGrocerySpendingSection() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Flexible(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              AutoSizeText(
                AppStrings.monthlyGrocerySpending.tr,
                style: AppStyle.kohSantepheap18w400C000000,
                maxLines: 2,
                minFontSize: 8,
              ),
              AutoSizeText(
                AppStrings.totalExpenses.tr,
                style: AppStyle.roboto12w400C80000000,
                maxLines: 1,
                minFontSize: 6,
              ),
            ],
          ),
        ),
        _buildViewBreakdownButton(),
      ],
    );
  }

  Widget _buildViewBreakdownButton() {
    return GestureDetector(
      onTap: () {
        // Your onPressed logic here
      },
      child: Container(
        alignment: Alignment.center,
        height: 36.h,
        width: 106.w,
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(4.r),
          border: Border.all(
            color: AppColors.yellowFFD673,
          ),
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            Flexible(
              child: AutoSizeText(
                AppStrings.viewBreakdown.tr,
                style: AppStyle.roboto10w400C000000,
                maxLines: 1,
                minFontSize: 6,
              ),
            ),
            Gap(4.w),
            SvgPicture.asset(
              Assets.icons.forwardView.path,
              height: 12.h,
              width: 12.w,
              color: const Color(0xff000000).withOpacity(0.5),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildExpensesCards() {
    return SizedBox(
      height: 189.h,
      child: Row(
        children: [
          Expanded(
            child: _buildExpenseCard(
              backgroundColor: const Color(0xFFF9D976),
              iconPath: Assets.icons.sales.path,
              title: AppStrings.totalSpent.tr,
              subtitle: AppStrings.trackTotalSpent.tr,
              amount: '\$2800',
            ),
          ),
          Gap(12.w),
          Expanded(
            child: _buildExpenseCard(
              backgroundColor: const Color(0xFFE4DFD7),
              iconPath: Assets.icons.coin.path,
              title: AppStrings.budgetLimit.tr,
              subtitle: AppStrings.underBudget.tr,
              amount: '\$3000',
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildExpenseCard({
    required Color backgroundColor,
    required String iconPath,
    required String title,
    required String subtitle,
    required String amount,
  }) {
    return Container(
      padding: EdgeInsets.symmetric(vertical: 16.h, horizontal: 12.w),
      decoration: BoxDecoration(
        color: backgroundColor,
        borderRadius: BorderRadius.circular(12.r),
        border: Border.all(color: Colors.black12),
      ),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              _buildCircularIcon(iconPath, Colors.black),
              _buildCircularIcon(Assets.icons.star.path, null),
            ],
          ),
          Gap(8.h),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Flexible(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    AutoSizeText(
                      title,
                      style: AppStyle.roboto16w500C000000,
                      maxLines: 1,
                      minFontSize: 8,
                    ),
                    AutoSizeText(
                      subtitle,
                      style: AppStyle.roboto10w500C80000000,
                      maxLines: 1,
                      minFontSize: 6,
                    ),
                  ],
                ),
              ),
              AutoSizeText(
                amount,
                style: AppStyle.roboto14w500C000000,
                maxLines: 1,
                minFontSize: 10,
              ),
            ],
          ),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              AutoSizeText(
                AppStrings.add.tr,
                style: AppStyle.roboto12w400C000000,
                maxLines: 1,
                minFontSize: 8,
              ),
              _buildCircularIcon(Assets.icons.plus.path, Colors.black),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildCircularIcon(String iconPath, Color? iconColor) {
    return CircleAvatar(
      backgroundColor: Colors.white,
      radius: 20.r,
      child: Image.asset(
        iconPath,
        color: iconColor,
        height: 26.h,
        width: 26.w,
      ),
    );
  }

  Widget _buildRecentPurchasesSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          AppStrings.recentPurchases.tr,
          style: AppStyle.kohSantepheap18w400C000000,
        ),
        Gap(12.h),
        SizedBox(
          height: 210.h,
          child: ListView(
            scrollDirection: Axis.horizontal,
            children: [
              PurchaseCard(
                category: 'Dairy',
                name: 'Milk',
                price: '\$8.50',
                imageUrl: Assets.images.dairy.path,
              ),
              PurchaseCard(
                category: 'Meat',
                name: 'Chicken Breast',
                price: '\$8.50',
                imageUrl: Assets.images.meat.path,
              ),
              PurchaseCard(
                category: 'Vegetables',
                name: 'Broccoli',
                price: '\$2.00',
                imageUrl: Assets.images.brocoli.path,
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildPurchaseHistorySection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        _buildPurchaseHistoryHeader(),
        ListView(
          physics: const NeverScrollableScrollPhysics(),
          shrinkWrap: true,
          children: [
            PurchaseHistoryItem(
              item: 'Milk',
              category: 'Dairy',
              price: '\$2.50',
              imageUrl: Assets.icons.milk.path,
            ),
            PurchaseHistoryItem(
              item: 'Bread',
              category: 'Bakery',
              price: '\$1.80',
              imageUrl: Assets.icons.bread.path,
            ),
            PurchaseHistoryItem(
              item: 'Apples',
              category: 'Fruits',
              price: '\$3.00',
              imageUrl: Assets.icons.apples.path,
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildPurchaseHistoryHeader() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Flexible(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              AutoSizeText(
                AppStrings.purchaseHistory.tr,
                style: AppStyle.kohSantepheap18w400C000000,
                maxLines: 2,
                minFontSize: 8,
              ),
              AutoSizeText(
                AppStrings.itemsYouveBought.tr,
                style: AppStyle.roboto12w400C80000000,
                maxLines: 1,
                minFontSize: 6,
              ),
            ],
          ),
        ),
        _buildViewAllButton(),
      ],
    );
  }

  Widget _buildViewAllButton() {
    return GestureDetector(
      onTap: () {
        // Your onPressed logic here
      },
      child: Container(
        alignment: Alignment.center,
        height: 22.h,
        width: 69.w,
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(4.r),
          border: Border.all(
            color: AppColors.yellowFFD673,
          ),
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            Flexible(
              child: AutoSizeText(
                AppStrings.viewAll.tr,
                style: AppStyle.roboto12w400C000000,
                maxLines: 1,
                minFontSize: 6,
              ),
            ),
            Gap(4.w),
            SvgPicture.asset(
              Assets.icons.forwardView.path,
              height: 12.h,
              width: 12.w,
              color: const Color(0xff000000).withOpacity(0.5),
            ),
          ],
        ),
      ),
    );
  }
}




/////////// auth ///////
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:gap/gap.dart';
import 'package:get/get.dart';
import 'package:go_router/go_router.dart';
import 'package:groc_shopy/core/custom_assets/assets.gen.dart';
import 'package:groc_shopy/core/routes/route_path.dart';
import 'package:groc_shopy/helper/extension/base_extension.dart';
import 'package:groc_shopy/utils/app_colors/app_colors.dart';
import 'package:groc_shopy/utils/static_strings/static_strings.dart';
import 'package:groc_shopy/utils/text_style/text_style.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../../../helper/local_db/local_db.dart';
import '../../widgets/custom_bottons/custom_button/app_button.dart';
import '../../widgets/custom_text_form_field/custom_text_form.dart';
import 'controller/auth_controller.dart';

// Add these imports for Google Sign-In
import 'package:google_sign_in/google_sign_in.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

class AuthScreen extends StatefulWidget {
  const AuthScreen({super.key});

  @override
  AuthScreenState createState() => AuthScreenState();
}

class AuthScreenState extends State<AuthScreen> {
  // Controllers & state variables
  final AuthController _authController = Get.find<AuthController>();
  bool _isAdmin = true;
  bool _rememberMe = false;
  bool _passwordVisible = false;

  // UI Constants
  static const double _horizontalPadding = 20;

  @override
  void initState() {
    super.initState();
    _authController.loadSavedCredentials();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Obx(
        () => SafeArea(
          child: Center(
            child: SingleChildScrollView(
              child: Padding(
                padding: EdgeInsets.symmetric(horizontal: _horizontalPadding.w),
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    _buildHeader(),
                    Gap(45.h),
                    _buildEmailField(),
                    Gap(35.h),
                    _buildPasswordField(),
                    Gap(6.73.h),
                    _isAdmin
                        ? _buildAdminOptions(context)
                        : _buildEmployeeOptions(),
                    Gap(28.h),
                    _buildOrDivider(),
                    Gap(31.h),
                    _buildSocialSignInOptions(),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildHeader() {
    return Column(
      children: [
        _buildLogo(),
        Gap(15.h),
        _buildTitle(),
        Gap(25.h),
        _buildRoleTabs(),
      ],
    );
  }

  Widget _buildLogo() {
    return Image.asset(
      Assets.icons.logo.path,
      height: 70.h,
      width: 70.w,
    );
  }

  Widget _buildTitle() {
    return Text(
      AppStrings.signIn.tr,
      style: AppStyle.kohSantepheap18w700CFFD673,
    );
  }

  Widget _buildRoleTabs() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        _buildRoleTab(AppStrings.employee.tr, !_isAdmin,
            () => setState(() => _isAdmin = false)),
        _buildRoleTab(AppStrings.admin.tr, _isAdmin,
            () => setState(() => _isAdmin = true)),
      ],
    );
  }

  Widget _buildRoleTab(String title, bool selected, VoidCallback onTap) {
    final color =
        selected ? AppColors.yellowFFD673 : AppColors.black50opacity80000000;
    final fontWeight = selected ? FontWeight.bold : FontWeight.normal;

    return GestureDetector(
      onTap: onTap,
      child: Container(
        padding: EdgeInsets.symmetric(vertical: 8.w),
        width: 175.w,
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              title,
              style: AppStyle.inter16w700C80000000.copyWith(
                fontWeight: fontWeight,
                color: color,
              ),
            ),
            Gap(12.h),
            Container(
              height: selected ? 4.h : 1.h,
              decoration: BoxDecoration(
                color: color,
                borderRadius: BorderRadius.circular(3),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildEmailField() {
    return CustomTextFormField(
      controller: _authController.emailController.value,
      labelText: AppStrings.email.tr,
      hintText: AppStrings.enterYourEmailHint.tr,
      suffixIcon: Icons.email_outlined,
      obscureText: false,
      hintStyle: AppStyle.roboto14w500CB3B3B3,
      style: AppStyle.roboto16w500C545454,
      labelStyle: AppStyle.roboto14w500C000000,
      enabledBorderColor: AppColors.black30opacity4D000000,
      focusedBorderColor: AppColors.yellowFFD673,
      fillColor: Colors.white,
      contentPadding: EdgeInsets.fromLTRB(16.w, 20.h, 16.w, 14.h),
    );
  }

  Widget _buildPasswordField() {
    return CustomTextFormField(
      controller: _authController.passController.value,
      labelText: AppStrings.password.tr,
      hintText: AppStrings.password.tr,
      suffixIcon: _passwordVisible
          ? Icons.visibility_outlined
          : Icons.visibility_off_outlined,
      obscureText: !_passwordVisible,
      onSuffixIconTap: _togglePasswordVisibility,
      hintStyle: AppStyle.roboto14w500CB3B3B3,
      style: AppStyle.roboto16w500C545454,
      labelStyle: AppStyle.roboto14w500C000000,
      enabledBorderColor: AppColors.black30opacity4D000000,
      focusedBorderColor: AppColors.yellowFFD673,
      fillColor: Colors.white,
      contentPadding: EdgeInsets.fromLTRB(16.w, 20.h, 16.w, 14.h),
    );
  }

  Widget _buildAdminOptions(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        _buildForgotPasswordLink(context),
        _buildRememberMeCheckbox(),
        Gap(33.h),
        _buildSignInButton(() => _authController.signIn(context: context)),
        Gap(15.h),
        _buildSignUpOption(context),
      ],
    );
  }

  Widget _buildForgotPasswordLink(BuildContext context) {
    return Align(
      alignment: Alignment.centerRight,
      child: GestureDetector(
        onTap: () => context.push(RoutePath.forgotPass.addBasePath),
        child: Text(
          AppStrings.forgotPassword.tr,
          style: AppStyle.roboto14w500CFFD673,
        ),
      ),
    );
  }

  Widget _buildEmployeeOptions() {
    return Column(
      children: [
        _buildRememberMeCheckbox(),
        Gap(33.h),
        _buildSignInButton(
            () => _authController.employeeSignIn(context: context)),
      ],
    );
  }

  Widget _buildRememberMeCheckbox() {
    return Obx(() => Row(
          children: [
            Checkbox(
              value: _authController.rememberMe.value,
              onChanged: (value) =>
                  _authController.rememberMe.value = value ?? false,
              activeColor: AppColors.yellowFFD673,
            ),
            Text(
              AppStrings.rememberMe.tr,
              style: AppStyle.roboto14w400C000000,
            ),
          ],
        ));
  }

  Widget _buildSignInButton(VoidCallback onPressed) {
    return AppButton(
      text: AppStrings.signIn.tr,
      onPressed: onPressed,
      width: double.infinity,
      height: 48.h,
      backgroundColor: AppColors.yellowFFD673,
      borderRadius: 8,
      textStyle: AppStyle.inter16w700CFFFFFF,
    );
  }

  Widget _buildSignUpOption(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Text(
          AppStrings.dontHaveAAccount.tr,
          style: AppStyle.roboto14w400C000000,
        ),
        GestureDetector(
          onTap: () => context.push(RoutePath.adminSignUp.addBasePath),
          child: _buildUnderlinedText(AppStrings.signUp.tr),
        ),
      ],
    );
  }

  Widget _buildUnderlinedText(String text) {
    return Stack(
      alignment: Alignment.centerLeft,
      children: [
        Padding(
          padding: EdgeInsets.only(bottom: 2.h),
          child: Text(
            text,
            style: AppStyle.roboto14w500CFFD673,
          ),
        ),
        Positioned(
          bottom: 0,
          left: 0,
          right: 0,
          child: Container(
            height: 2.h,
            color: AppColors.yellowFFD673,
          ),
        ),
      ],
    );
  }

  Widget _buildOrDivider() {
    return Text(
      AppStrings.or.tr,
      style: AppStyle.roboto14w500C80000000,
    );
  }

  Widget _buildSocialSignInOptions() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        _buildSocialIcon(
          iconPath: Assets.icons.appleSignin.path,
          onTap: _signInWithApple,
        ),
        Gap(15.w),
        _buildSocialIcon(
          iconPath: Assets.icons.google.path,
          onTap: _signInWithGoogle,
        ),
      ],
    );
  }

  Widget _buildSocialIcon({
    required String iconPath,
    required VoidCallback onTap,
  }) {
    return GestureDetector(
      onTap: onTap,
      child: CircleAvatar(
        backgroundColor: Colors.transparent,
        child: Image.asset(iconPath),
      ),
    );
  }

  // Event handlers
  void _togglePasswordVisibility() {
    setState(() {
      _passwordVisible = !_passwordVisible;
    });
  }

  void _onRememberMeChanged(bool? value) {
    setState(() {
      _rememberMe = value ?? false;
    });
  }

  void _signInWithApple() async {}

  void _signInWithGoogle() async {
    GoogleSignIn? googleSignIn;

    try {
      print('Starting Google Sign-In...');

      // Show loading indicator using Flutter's showDialog instead of GetX
      showDialog(
        context: context,
        barrierDismissible: false,
        builder: (BuildContext context) {
          return const Center(
            child: CircularProgressIndicator(),
          );
        },
      );

      // Initialize Google Sign-In with your Web Client ID
      googleSignIn = GoogleSignIn(
        serverClientId:
            '418880569981-1ibh3bv48t8c8tla9cudp6o5q59elg0i.apps.googleusercontent.com',
        scopes: ['email', 'profile', 'openid'],
      );

      print('GoogleSignIn initialized');

      // Clear any existing sign-in
      try {
        await googleSignIn.signOut();
        print('Previous sign-in cleared');
      } catch (e) {
        print('Error clearing previous sign-in: $e');
      }

      // Start the sign-in process
      print('Starting sign-in process...');
      final GoogleSignInAccount? googleUser = await googleSignIn.signIn();

      // Close loading dialog safely
      if (Navigator.of(context).canPop()) {
        Navigator.of(context).pop();
      }

      if (googleUser == null) {
        print('User cancelled Google Sign-In');
        _showMessage('Google sign-in was cancelled');
        return;
      }

      print('Google User obtained: ${googleUser.email}');

      // Get authentication details
      final GoogleSignInAuthentication googleAuth =
          await googleUser.authentication;
      final String? accessToken = googleAuth.accessToken;
      final String? idToken = googleAuth.idToken;

      print('Access Token available: ${accessToken != null}');
      print('ID Token available: ${idToken != null}');

      if (accessToken == null || accessToken.isEmpty) {
        throw Exception('Failed to get access token from Google');
      }

      print('=== Google Sign-In Success ===');
      print('User: ${googleUser.displayName ?? 'Unknown'}');
      print('Email: ${googleUser.email ?? 'Unknown'}');

      // Safe access token logging
      final tokenPreview = accessToken.length > 20
          ? '${accessToken.substring(0, 20)}...'
          : accessToken;
      print('Access Token: $tokenPreview');

      // Show loading for backend request
      showDialog(
        context: context,
        barrierDismissible: false,
        builder: (BuildContext context) {
          return const Center(
            child: CircularProgressIndicator(),
          );
        },
      );

      try {
        // Send token to Django backend
        print('Sending request to backend...');
        final response = await http.post(
          Uri.parse('http://10.0.70.145:8001/dj-rest-auth/google/'),
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
          },
          body: jsonEncode({
            'access_token': accessToken,
            if (idToken != null && idToken.isNotEmpty) 'id_token': idToken,
          }),
        );

        // Close loading dialog
        if (Navigator.of(context).canPop()) {
          Navigator.of(context).pop();
        }

        print('Backend Response Status: ${response.statusCode}');
        print('Backend Response Body: ${response.body}');

        if (response.statusCode == 200 || response.statusCode == 201) {
          final responseData =
              jsonDecode(response.body) as Map<String, dynamic>;

          // Look for authentication token
          final String? authToken = responseData['key'] as String? ??
              responseData['access_token'] as String? ??
              responseData['token'] as String? ??
              responseData['auth_token'] as String?;

          print('Auth token found: ${authToken != null}');

          if (authToken != null && authToken.isNotEmpty) {
            // Save user data
            final prefs = await SharedPreferences.getInstance();
            await prefs.setString('auth_token', authToken);
            await prefs.setString('user_email', googleUser.email);
            await prefs.setString('user_name', googleUser.displayName ?? '');
            await prefs.setString('user_photo', googleUser.photoUrl ?? '');
            await prefs.setBool('is_logged_in', true);

            print('User data saved successfully');

            // Navigate to home
            if (mounted && context.mounted) {
              context.push(RoutePath.home.addBasePath);
              print('Navigation to home successful');
            }

            // Show success message
            _showMessage('Welcome ${googleUser.displayName ?? 'User'}!',
                isSuccess: true);
          } else {
            throw Exception(
                'No valid authentication token received from server');
          }
        } else {
          String errorMessage =
              'Authentication failed (${response.statusCode})';
          try {
            final errorData = jsonDecode(response.body) as Map<String, dynamic>;
            errorMessage = errorData['error']?.toString() ??
                errorData['detail']?.toString() ??
                errorData['message']?.toString() ??
                errorMessage;
          } catch (parseError) {
            print('Error parsing error response: $parseError');
          }
          throw Exception(errorMessage);
        }
      } catch (e) {
        // Close loading dialog if still open
        if (Navigator.of(context).canPop()) {
          Navigator.of(context).pop();
        }
        rethrow;
      }
    } catch (e) {
      print('Google Sign-In Error: $e');

      // Ensure all dialogs are closed
      if (Navigator.of(context).canPop()) {
        Navigator.of(context).pop();
      }

      String errorMessage = e.toString();
      if (errorMessage.contains('network') ||
          errorMessage.contains('ClientException')) {
        errorMessage = 'Network error: Please check your connection';
      } else if (errorMessage.contains('PlatformException')) {
        errorMessage = 'Google Sign-In not available on this device';
      } else {
        errorMessage = 'Sign-in failed: Please try again';
      }

      _showMessage('Sign In Failed: $errorMessage', isSuccess: false);
    }
  }

  // Helper method for safer message display
  void _showMessage(String message, {bool isSuccess = false}) {
    try {
      print('Showing message: $message');

      if (mounted && context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              message,
              style: const TextStyle(
                color: Colors.white,
                fontSize: 16,
              ),
            ),
            backgroundColor: isSuccess ? Colors.green : Colors.red,
            duration: const Duration(seconds: 3),
            behavior: SnackBarBehavior.floating,
            margin: const EdgeInsets.all(10),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
            ),
          ),
        );
      } else {
        print('Context not available for showing snackbar');
      }
    } catch (e) {
      print('Error showing message: $e');
      print('Message was: $message');
    }
  }
}


//// ///////////////
import Flutter
import UIKit
import GoogleSignIn

@main
@objc class AppDelegate: FlutterAppDelegate {
  override func application(
    _ application: UIApplication,
    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?
  ) -> Bool {
    
    // Configure Google Sign-In with your iOS Client ID
    let clientId = "418880569981-rhqdotqk52ii81uhp7df0pulslh94ivf.apps.googleusercontent.com"
    
    // Validate client ID is not empty
    if !clientId.isEmpty {
      let config = GIDConfiguration(clientID: clientId)
      GIDSignIn.sharedInstance.configuration = config
      print("Google Sign-In configured successfully")
    } else {
      print("Error: Google Sign-In Client ID is empty")
    }
    
    GeneratedPluginRegistrant.register(with: self)
    return super.application(application, didFinishLaunchingWithOptions: launchOptions)
  }
  
  override func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -> Bool {
    if GIDSignIn.sharedInstance.handle(url) {
      return true
    }
    
    return super.application(app, open: url, options: options)
  }
}

/////

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>CFBundleDevelopmentRegion</key>
    <string>$(DEVELOPMENT_LANGUAGE)</string>
    <key>CFBundleDisplayName</key>
    <string>GastRonomIQ</string>
    <key>CFBundleExecutable</key>
    <string>$(EXECUTABLE_NAME)</string>
    <key>CFBundleIdentifier</key>
    <string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
    <key>CFBundleInfoDictionaryVersion</key>
    <string>6.0</string>
    <key>CFBundleName</key>
    <string>GastRonomIQ</string>
    <key>CFBundlePackageType</key>
    <string>APPL</string>
    <key>CFBundleShortVersionString</key>
    <string>$(FLUTTER_BUILD_NAME)</string>
    <key>CFBundleSignature</key>
    <string>????</string>
    <key>CFBundleVersion</key>
    <string>$(FLUTTER_BUILD_NUMBER)</string>
    <key>LSRequiresIPhoneOS</key>
    <true/>
    <key>UILaunchStoryboardName</key>
    <string>LaunchScreen</string>
    <key>UIMainStoryboardFile</key>
    <string>Main</string>

    <key>UISupportedInterfaceOrientations</key>
    <array>
        <string>UIInterfaceOrientationPortrait</string>
        <string>UIInterfaceOrientationLandscapeLeft</string>
        <string>UIInterfaceOrientationLandscapeRight</string>
    </array>

    <key>NSPhotoLibraryUsageDescription</key>
    <string>We need access to your photo library to select images for your profile.</string>

    <!-- Fixed: Single NSCameraUsageDescription -->
    <key>NSCameraUsageDescription</key>
    <string>We need access to your camera to scan cards and take photos.</string>

    <key>NSMicrophoneUsageDescription</key>
    <string>We need access to the microphone to record audio in videos.</string>

    <key>UISupportedInterfaceOrientations~ipad</key>
    <array>
        <string>UIInterfaceOrientationPortrait</string>
        <string>UIInterfaceOrientationPortraitUpsideDown</string>
        <string>UIInterfaceOrientationLandscapeLeft</string>
        <string>UIInterfaceOrientationLandscapeRight</string>
    </array>

    <key>CADisableMinimumFrameDurationOnPhone</key>
    <true/>
    <key>UIApplicationSupportsIndirectInputEvents</key>
    <true/>

    <!-- Google Sign-In URL Schemes -->
    <key>CFBundleURLTypes</key>
    <array>
        <dict>
            <key>CFBundleURLName</key>
            <string>google</string>
            <key>CFBundleURLSchemes</key>
            <array>
                <!-- iOS URL scheme from your iOS Client ID -->
                <string>com.googleusercontent.apps.418880569981-rhqdotqk52ii81uhp7df0pulslh94ivf</string>
            </array>
        </dict>
    </array>
</dict>
</plist>

///